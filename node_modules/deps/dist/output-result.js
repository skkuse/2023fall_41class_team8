"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const util_1 = __importDefault(require("util"));
const fs = __importStar(require("fs"));
const cli_simple_table_1 = __importDefault(require("cli-simple-table"));
const read_pkg_1 = __importDefault(require("read-pkg"));
const $writeFile = util_1.default.promisify(fs.writeFile);
async function outputResult(result, options) {
    if (options === null || options === void 0 ? void 0 : options.output) {
        await $writeFile(options.output, JSON.stringify(result, null, '  '));
        return;
    }
    const pkg = await read_pkg_1.default();
    const table = new cli_simple_table_1.default();
    table.header('Dependency', 'Type', 'Used (files)');
    ['dependencies', 'devDependencies'].forEach(depType => {
        if (!(depType in pkg)) {
            return;
        }
        const deps = pkg[depType];
        Object.keys(deps)
            .sort(pkgName => (`node_modules/${pkgName}` in result) ? -1 : 1)
            .forEach(pkgName => {
            const key = `node_modules/${pkgName}`;
            const used = (key in result);
            if (used) {
                pkgName = chalk_1.default.greenBright(pkgName);
            }
            table.row(pkgName, depType, used ? `✅ (${result[key].length})` : '');
            if (used) {
                result[key] = [];
            }
        });
    });
    Object.keys(result).forEach(key => {
        if (result[key].length > 0) {
            table.row(chalk_1.default.dim(key.replace(/^.*?node_modules\//, '')), 'nested', `✅ (${result[key].length})`);
        }
    });
    console.log('\n');
    console.log(chalk_1.default.cyan.bold('deps report'));
    console.log();
    console.log(table.toString());
}
exports.default = outputResult;
