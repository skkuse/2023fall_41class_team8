"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const minimist_1 = __importDefault(require("minimist"));
const chalk_1 = __importDefault(require("chalk"));
const show_help_1 = __importDefault(require("./show-help"));
const output_result_1 = __importDefault(require("./output-result"));
const _1 = __importDefault(require("."));
const path = __importStar(require("path"));
exports.default = (async () => {
    const { help, version, verbose, output, file, _ } = minimist_1.default(process.argv.slice(2), {
        boolean: [
            'version',
            'help',
        ],
        alias: {
            file: 'f',
            output: 'o',
            help: 'h',
        },
    });
    if (_.length > 0) {
        const cmd = _.join(' ');
        return _1.default(cmd, { verbose, output });
    }
    if (file) {
        const pkg = require(path.resolve(file)); // eslint-disable-line @typescript-eslint/no-var-requires
        await output_result_1.default(pkg);
        return 0;
    }
    if (!help && !version) {
        console.log(chalk_1.default.red.bold('\n[deps error]'), 'No command passed in');
        show_help_1.default();
        return 1;
    }
    show_help_1.default();
    return 0;
})().catch(error => {
    console.log(chalk_1.default.red.bold('\n[deps error]'), error.message);
});
