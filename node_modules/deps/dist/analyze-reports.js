"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const util_1 = __importDefault(require("util"));
const path_1 = __importDefault(require("path"));
const sort_keys_1 = __importDefault(require("sort-keys"));
const $readdir = util_1.default.promisify(fs.readdir);
const $readFile = util_1.default.promisify(fs.readFile);
const getReports = async (coverageDir) => Promise.all((await $readdir(coverageDir))
    .filter(f => f.endsWith('.json'))
    .map(async (file) => {
    const reportPath = path_1.default.resolve(coverageDir, file);
    const content = await $readFile(reportPath);
    return JSON.parse(content.toString()).result;
}));
const depPtrn = /^.*node_modules\/(@[^/]+\/)?[^/]+/;
const cwd = `file://${process.cwd()}`;
const analyzeReports = async (coverageDir) => {
    const reports = await getReports(coverageDir);
    const usedDependencies = {};
    reports.forEach(reportFiles => {
        reportFiles.forEach(f => {
            if (!f.url.startsWith(cwd)) {
                return;
            }
            const relativePath = f.url.slice(cwd.length + 1);
            const isDep = depPtrn.exec(relativePath);
            if (!isDep) {
                return;
            }
            const [depName] = isDep;
            if (!usedDependencies[depName]) {
                usedDependencies[depName] = [];
            }
            usedDependencies[depName].push(relativePath);
        });
    });
    return sort_keys_1.default(usedDependencies);
};
exports.default = analyzeReports;
